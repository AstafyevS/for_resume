#!/usr/bin/env python
# coding: utf-8

# <font color='blue' size=5><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>
# 
# <font color='blue'>–ü—Ä–∏–≤–µ—Ç, –°–µ—Ä–≥–µ–π! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–∞–≤–µ–ª –ì—Ä–∏–≥–æ—Ä—å–µ–≤, –∏ —è –±—É–¥—É –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç.<br>–ú–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å - –Ω–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞ —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã–µ —Ç–æ–±–æ–π –æ—à–∏–±–∫–∏, –∞ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –æ–ø—ã—Ç–æ–º –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É.<br>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É! –ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—â–∞—Ç—å—Å—è –Ω–∞ ¬´—Ç—ã¬ª.</font>
# <details>
# 	<summary><u>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–º –º–æ–º–µ—Ç–Ω–∞–º (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ)</u></summary>
# <font color='blue'>–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:</font>
# 
# 
# ---
# 
# 
# <font color='blue'>—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</font>
# 
# <font color='green'>‚úîÔ∏è –∏ –∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç - –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ</font>
# 
# <font color='orange'>‚ö†Ô∏è –∏ –æ—Ä–∞–Ω–∂–µ–≤—ã–π —Ç–µ–∫—Å—Ç - —Å–¥–µ–ª–∞–Ω–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ–¥–Ω–∞–∫–æ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –Ω–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ</font>
# 
# <font color='red'>‚ùå –∏ –∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç - –µ—Å—Ç—å –Ω–µ–¥–æ—á–µ—Ç—ã</font>
# 
# 
# </details>    
#     </br>
# <font color='blue'>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã, —Ç–∞–∫ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è, –∫–∞–∫–∏–µ –±—ã–ª–∏ –Ω–µ–¥–æ—á–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ. </font>
# 
# –û—Ç–≤–µ—Ç—ã –Ω–∞ –º–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ª—É—á—à–µ —Ç–æ–∂–µ –ø–æ–º–µ—á–∞—Ç—å.
# –ù–∞–ø—Ä–∏–º–µ—Ä: <font color='purple'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞</b></font>
# 
# <font color='blue'><b>–î–∞–≤–∞–π —Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å!</b></font>
# 

# <font color='blue' size=3><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2</b></font>
# 
# <font color='blue'>–ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑. –°–ø–∞—Å–∏–±–æ, –∑–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è. –¢–æ–ª—å–∫–æ –æ–±–æ–∑–Ω–∞—á–∏–º, —á—Ç–æ —ç—Ç–æ –≤—Ç–æ—Ä–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è.</font> 

# <font color='blue' size=3><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 3</b></font>
# 
# <font color='blue'>–ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑. –°–ø–∞—Å–∏–±–æ, –∑–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.</font> 

# # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π

# –°–µ—Ä–≤–∏—Å –ø–æ –ø—Ä–æ–¥–∞–∂–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π —Å –ø—Ä–æ–±–µ–≥–æ–º ¬´–ù–µ –±–∏—Ç, –Ω–µ –∫—Ä–∞—à–µ–Ω¬ª —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤. –í –Ω—ë–º –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ä—ã–Ω–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. –í –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏ –∏ —Ü–µ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –í–∞–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏. 
# 
# –ó–∞–∫–∞–∑—á–∏–∫—É –≤–∞–∂–Ω—ã:
# 
# - –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è;
# - —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è;
# - –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.

# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[1]:


get_ipython().run_line_magic('autosave', '10')


# !pip install lightgbm

# In[2]:


get_ipython().system(' pip install -q optuna')


# In[3]:


#–ó–∞–≥—Ä—É–∑–∏–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import pandas as pd
import numpy as np
import seaborn as sns
import os
import optuna
import time
import catboost as cb
from sklearn.model_selection import train_test_split
from catboost import CatBoostRegressor
import lightgbm as lgb
from lightgbm import LGBMRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn.model_selection import KFold
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import OrdinalEncoder
from sklearn.preprocessing import OneHotEncoder
from sklearn.metrics import mean_squared_error
from sklearn.metrics import make_scorer
from math import sqrt


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'> –•–æ—Ä–æ—à–µ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤! \
# –ò–º–ø–æ—Ä—Ç—ã —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ, —Å–≥—Ä—É–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏. –ú–æ–∂–Ω–æ –µ—â—ë —Ä–∞–∑–¥–µ–ª–∏—Ç—å –≥—Ä—É–ø–ø—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.</font>

# In[4]:


data = pd.read_csv('/datasets/autos.csv')
data.head(50)


# In[5]:


data.info()


# ### –û–±—Ä–∞–±–æ—Ç–∞–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö

# In[6]:


data.isna().sum()


# –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–∏–ª–∏:
# 1. –û–∫–æ–ª–æ 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –ø–æ —Ç–∏–ø—É –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫—É–∑–æ–≤–∞.
# 2. 6 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ—Ä–æ–±–∫–µ
# 3. 6 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ –º–æ–¥–µ–ª–∏
# 4. 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞
# 5. –ò —É —Ü–µ–ª—ã—Ö 20 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–º–æ–Ω—Ç–µ. (–ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Ö–æ—Ç—è—Ç —Å–æ–æ–±—â–∞—Ç—å —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–∞–º–∏ –≤–ª–∞–¥–µ–ª—å—Ü—ã)

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–µ—Ä–≤–∏—á–Ω—ã–π –æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≤–µ–¥–µ–Ω.</font>

# In[7]:


#–ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ —Å —Ç–∏–ø–æ–º –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–≥–æ –∫—É–∑–æ–≤–∞ —Å–∞–º—ã–º —á–∞—Å—Ç–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–º—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º
data['VehicleType'].value_counts()


# In[8]:


data['VehicleType'] = data['VehicleType'].fillna('sedan')


# In[9]:


#–ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ —Ç–∏–ø—É —Ç–æ–ø–ª–∏–≤–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
data['FuelType'] = data['FuelType'].fillna(method='ffill')


# In[10]:


#–ó–∞–ø–æ–ª–Ω–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ –ø–æ —Ä–µ–º–æ–Ω—Ç—É –∑–Ω–∞—á–µ–Ω–∏–µ–º 'no'
data['Repaired'] = data['Repaired'].fillna('no')


# In[11]:


#–£–¥–∞–ª–∏–º –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–µ 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
data = data.dropna(subset=['Gearbox', 'Model'])


# In[12]:


data.isna().sum()


# In[13]:


data.info()


# –í –æ–±—â–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ —á—É—Ç—å –º–µ–Ω–µ–µ 10 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'> –ü—Ä–æ–ø—É—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ.
# </font>

# In[14]:


data.duplicated().sum()


# –£–¥–∞–ª–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ —Ü–µ–Ω—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è.

# In[15]:


data = data.drop(columns=['PostalCode','LastSeen','NumberOfPictures','DateCrawled','DateCreated'])
data.head()


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚úîÔ∏è\
# <font color='green'> –û—Ç–ª–∏—á–Ω–æ!</font>

# –ù–∞–π–¥–µ–º –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

# In[16]:


sns.boxplot(data['Price'])


# –£–¥–∞–ª–∏–º –¥–∞–Ω–Ω—ã–µ –±–æ–ª—å—à–µ 15000 –∏ –º–µ–Ω—å—à–µ 100

# In[17]:


data = data.loc[data['Price'] < 15000]
data = data.loc[data['Price'] >100]


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚ö†Ô∏è\
# <font color='darkorange'> –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ü–µ–Ω—É = 0.</font>

# In[18]:


sns.boxplot(data['Power'])


# –£–¥–∞–ª–∏–º –≤—Å–µ —á—Ç–æ –±–æ–ª—å—à–µ 2500

# In[19]:


data = data.loc[data['Power'] < 2500]


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚úîÔ∏è\
# <font color='green'>üëç</font>

# In[20]:


sns.boxplot(data['Kilometer'])


# –° –∫–∏–ª–æ–º–µ—Ç—Ä–∞–º–∏ –≤—Ä–æ–¥–µ –≤—Å–µ –Ω–æ—Ä–º

# In[21]:


sns.boxplot(data['RegistrationYear'])


# In[22]:


data = data.loc[data['RegistrationYear'] < 2023]
data = data.loc[data['RegistrationYear'] > 1885]


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚ö†Ô∏è\
# <font color='darkorange'> –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—ã –≤ DateCrawled –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å RegistrationYear</font>

# In[23]:


data.info()


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s> –ù—É–∂–Ω–æ –æ–±—Ä–±–æ—Ç–∞—Ç—å –Ω–µ—Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.</s></font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s>—ë –Ω—É–∂–Ω–æ —Ä–µ—à–∏—Ç—å, –∞ –≤—Å–µ –ª–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ—Å—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ –∞–≤—Ç–æ. –õ–∏—à–Ω–∏–π —à—É–º —É—Å–ª–æ–∂–Ω—è–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥–µ–ª–∏.</s></font>

# <font color='purple'> –°–¥–µ–ª–∞–Ω–æ.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚úîÔ∏è\
# <font color='green'>üëç</font>

# –ó–∞–¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å 4 –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –±—É–¥–µ–º –∏—Ö —É–¥–∞–ª—è—Ç—å –∏–ª–∏ –º–µ–Ω—è—Ç—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π –Ω–µ –ø–æ–≤–ª–∏—è–µ—Ç

# In[24]:


# –†–∞–∑–æ–±—å—Ç–µ–º –≤—ã–±–æ—Ä–∫—É –Ω–∞ features –∏ target
features = data.drop(columns='Price')
target = data['Price']
X = features
y = target


# In[25]:


X.size


# In[26]:


X.info()


# In[27]:


y.size


# ### –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∫–∏ –∫ —á–∏—Å–ª–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º

# In[28]:


cat_features = ['VehicleType', 'Gearbox', 'Model', 'FuelType', 'Brand', 'Repaired']


# In[29]:


# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—ã–±–æ—Ä–∫—É –ø–æ –º–µ—Ç–æ–¥—É One-Hot-Encoder
Xo = pd.get_dummies(features, drop_first=True)


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ö†Ô∏è\
# <font color='darkorange'>–•–æ—Ä–æ—à–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –Ω–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–∞–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ç–∞–∫–æ–π-–∂–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å—é –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è. –î–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω—É–∂–µ–Ω OneHotEncoder.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s> –≠–Ω–∫–æ–¥–µ—Ä (–∫–∞–∫ –∏ –°–∫–∞–ª–µ—Ä) –Ω–µ–ª—å–∑—è –æ–±—É—á–∞—Ç—å –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\
# –î–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –æ–Ω–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —É—Ç–µ—á–∫–µ –∏–∑ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏ –≤–æ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ. –¢–µ—Å—Ç–æ–≤—ã–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –æ–±—É—á–µ–Ω–Ω—ã–º–∏ –Ω–∞ train.</s></font>

# In[30]:


#–ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã –¥–ª—è Ordinal Encoder
features_ordinal = features.drop(columns=['Model','Brand'])


# In[31]:


# –†–∞–∑–æ–±—å–µ–º features –∏ target –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é, –æ–±—É—á–∞—é—â—É—é, –∞ –∑–∞—Ç–µ–º –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
X_or_train, X_or_valid, y_or_train, y_or_valid = train_test_split(features_ordinal, target, test_size=0.5, random_state=12345)
X_or_valid, X_or_test, y_or_valid, y_or_test = train_test_split(X_or_valid,y_or_valid, test_size=0.3, random_state=12345)


# In[32]:


# –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤—ã–±–æ—Ä–∫—É OrdinalEncoder
ordinal = OrdinalEncoder()
ordinal.fit(X_or_train)
features_or_train = pd.DataFrame(ordinal.transform(X_or_train),columns=X_or_train.columns)
print(features_or_train.head())


# In[33]:


features_or_valid = pd.DataFrame(ordinal.set_params(handle_unknown='use_encoded_value', unknown_value=666).transform(X_or_valid),columns=X_or_valid.columns)
features_or_test =  pd.DataFrame(ordinal.set_params(handle_unknown='use_encoded_value', unknown_value=666).transform(X_or_test),columns=X_or_test.columns)


# In[34]:


features_or_train.info()
y_or_train.size


# In[35]:


features_or_valid.info()
y_or_valid.size


# In[36]:


features_or_test.info()
y_or_test.size


# 
# ## –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π

# ### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º—É–ª

# In[37]:


# –ù–∞–ø–∏—à–µ–º —Ñ–æ—Ä–º—É–ª—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è RMSE
def rmse(actual, predictions):
    rmse = sqrt(mean_squared_error(actual, predictions))
    return rmse


# In[38]:


# –ù–∞–ø–∏—à–µ–º —Å–∫–æ—Ä–µ—Ä
scorer = make_scorer(rmse, greater_is_better=False)


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ö†Ô∏è\
# <font color='darkorange'> –î–ª—è –∫—Ä–æ—Å—Å–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –µ—Å—Ç—å –≥–æ—Ç–æ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ 'neg_root_mean_squared_error'. –ú–µ—Ç—Ä–∏–∫–∏ –º–æ–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å [–∑–¥–µ—Å—å](https://scikit-learn.org/stable/modules/model_evaluation.html) </font>

# ### –†–∞–±–æ—Ç–∞–µ–º —Å LightGBM

# In[39]:


kf = KFold(n_splits=3, shuffle=False)
for train_index, valid1_index in kf.split(X):
    print(train_index)
    print(valid1_index)
    


# In[40]:


valid_index, test_index = np.array_split(valid1_index, 2)


# In[41]:


valid_index


# In[42]:


test_index


# <font color='purple'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: </b></font> \
# <font color='red'> –ö–∞–∫ —Ä–∞–∑ –∑–¥–µ—Å—å —Ä–∞–∑–±–∏–≤–∞–µ–º —Ñ–∏—á–∏ –Ω–∞ 3 –≤—ã–±–æ—Ä–∫–∏. –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é.</font>

# In[43]:


for feature in cat_features:
            X[feature] = pd.Series(X[feature], dtype="category")


# In[44]:



lgbm=LGBMRegressor()
lgb_params = {'boosting_type' : 'gbdt',
              'objective' : 'regression',
              'metric' : 'rmse',
              'num_iterations' : 120,
              'learning_rate' : 0.5,
              'num_leaves' : 40,
              'num_threads' : 20,
              'verbosity' : 0
             }
train_data = lgb.Dataset(X.iloc[train_index], 
                         y.iloc[train_index], 
                         categorical_feature=cat_features, 
                         free_raw_data=False)


valid_data = lgb.Dataset(X.iloc[valid_index], 
                         y.iloc[valid_index], 
                         categorical_feature=cat_features, 
                         free_raw_data=False)


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>LGBM –º–æ–∂–µ—Ç —Å–∞–º –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö 'category', –Ω–æ —ç—Ç–∞ –∫–æ–¥—Ä–æ–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å OE, —Ç–æ –ø–æ–ª—É—á–∞—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.</font>

# In[45]:


start = time.time()
learned_lgd = lgb.train(lgb_params, 
          train_data, 
          valid_sets=[valid_data], 
          verbose_eval=20, 
          categorical_feature=cat_features, 
          num_boost_round=1200)

end = time.time()
study_lgbm = end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', study_lgbm, 'c')


# In[46]:


valid_pred_lgbm = learned_lgd.predict(X.iloc[valid_index])
print('RMSE_valid=', (rmse(y.iloc[valid_index], valid_pred_lgbm)))


# In[47]:


start = time.time()
test_pred_lgbm = learned_lgd.predict(X.iloc[test_index])
end = time.time()
lgbm_time_test = (end-start)
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', lgbm_time_test, 'c')


# In[48]:


print('RMSE=', (rmse(y.iloc[test_index], test_pred_lgbm)))


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s> –¢–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –î–ª—è –≤—ã–±–æ—Ä–∞ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ –∏ –ø–æ–¥–±–æ—Ä–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω—É–∂–Ω–∞ –µ—â—ë –æ–¥–Ω–∞ –≤—ã–±–æ—Ä–∫–∞ - –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è. –ò–º–µ–Ω–Ω–æ –ø–æ –Ω–µ–π –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ "–∫–æ–Ω–∫—É—Ä—Å –º–æ–¥–µ–ª–µ–π". –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—Ä–æ—Å—Å–≤–∞–ª–∏–¥–∞—Ü–∏—é, —Ç–∞–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</s></font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'><s>–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–µ–π.</s></font>

# <font color='Purple'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: </b></font> \
# <font color='red'> –û—Ç–¥–µ–ª—å–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–ª –ø—Ä–µ–¥–∏–∫—Ç –∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–æ–∫–µ. –ò —Ç–∞–∫ –∫–∞–∫ —Ä–∞–Ω–Ω–µ –Ω–∞–ø–∏—Å–∞–ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö –Ω–µ –≤–∏–∂—É —Å–º—ã—Å–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤—ã–±–æ—Ä–∫–∞—Ö. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å–∫–æ—Ä–µ–µ –æ—Å—Ç–∞—é —É–∂–µ –æ—á–µ–Ω—å. –ó–∞—Ä–∞–Ω–µ–µ —Å–ø–∞—Å–∏–±–æ.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 3: </b></font> ‚ùå\
# <font color='blue'>–í—Å–µ–º—É —Å–≤–æ—ë –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å –õ—É—á—à—É—é –∏ —Ç–æ–ª—å–∫–æ –∑–∞—Ç–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã.\
# –ú–æ–∂–Ω–æ, –∫–æ–Ω–µ—á–Ω–æ, —Å—Ä–∞–∑—É –ø–æ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–µ–¥–∏–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã–≤—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–æ —Ç–æ–≥–¥–∞ –Ω–∞–¥–æ —á—ë—Ç–∫–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º—É –ø—Ä–µ–¥–∏–∫—Ç—É, –Ω–µ –ø–æ –¢–µ—Å—Ç–æ–≤–æ–º—É.\
# –£ —Ç–µ–±—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø–æ —Ç–µ—Å—Ç–∞–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —ç—Ç–æ –æ—à–∏–±–∫–∞!</font>

# ### CAtBoostRegressor

# In[49]:


train_dataset = cb.Pool(X.iloc[train_index],y.iloc[train_index], 
                        cat_features=cat_features)                                                      
valid_dataset = cb.Pool(X.iloc[valid_index],y.iloc[valid_index],           
                       cat_features=cat_features)


# In[50]:


model_cbr = cb.CatBoostRegressor(loss_function='RMSE',  
                              eval_metric='RMSE')


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>–í–µ—Ä–Ω–æ, CatBoost –º–æ–∂–µ—Ç —Å–∞–º –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö 'object' –∏ 'category', –Ω–æ —ç—Ç–∞ –∫–æ–¥—Ä–æ–≤–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –ï—Å–ª–∏ –∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å OE, —Ç–æ –ø–æ–ª—É—á–∞—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ.</font>

# In[51]:


grid = {'learning_rate': [0.03, 0.5],
        'depth': [4, 6, 10],
        'l2_leaf_reg': [1, 3, 5,],
        'iterations': [50, 100, 150]}


# In[52]:


start=time.time()
model_cbr.grid_search(grid,train_dataset)
end=time.time()
study_cb=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', study_cb,'c')


# In[53]:


model_cbr.best_score_


# In[54]:


start=time.time()
pred_cbr = model_cbr.predict(X.iloc[test_index])
print('RMSE_Caboost =', rmse(y.iloc[test_index], pred_cbr))
end=time.time()
pred_cb=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', pred_cb,'c')


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>üëç</font>

# ### RandomForestRegressor

# In[55]:


model_rnd = RandomForestRegressor(random_state = 42, n_jobs = -1)


# In[56]:


# –∑–∞–¥–∞–¥–∏–º —Ä–∞—Å–ø—Ä–ø–¥–µ–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è optuna
param_distributions_randomforest_optuna = {
    'n_estimators': optuna.distributions.IntDistribution(10,1000,10),
    'max_depth': optuna.distributions.IntDistribution(2,40,1),
    'min_samples_split': optuna.distributions.IntDistribution(20,60,5),
    'min_samples_leaf': optuna.distributions.IntDistribution(1, 201, 10),
    'max_features': optuna.distributions.CategoricalDistribution(['sqrt','log2']),
    'bootstrap' : optuna.distributions.CategoricalDistribution([True, False])}


# In[57]:


opt_search_rnd = optuna.integration.OptunaSearchCV(estimator=model_rnd,
                                                       param_distributions=param_distributions_randomforest_optuna, 
                                                       cv=15 , 
                                                       n_trials=100, 
                                                       scoring=scorer, 
                                                       timeout=10, 
                                                       random_state=42)


# In[58]:



opt_search_rnd.fit(features_or_train, y_or_train)


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'> –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ OHE –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å OE (OrdinalEncoding). OHE —Å–∏–ª—å–Ω–æ –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (–∏ –≤—Ä–µ–º–µ–Ω–∏).</font>

# <font color='Purple'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: </b></font> \
# <font color='red'> –°–¥–µ–ª–∞–ª.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 3: </b></font> ‚úîÔ∏è\
# <font color='green'> –û—Ç–ª–∏—á–Ω–æ!  üëç</font>

# In[59]:


opt_search_rnd_score = opt_search_rnd.best_score_


# In[60]:


opt_search_best_model_rnd = opt_search_rnd.best_params_


# In[61]:


print('Best model =', opt_search_best_model_rnd)
print('RMSE =', opt_search_rnd_score*-1)


# In[62]:


start=time.time()
best_model_rnd = RandomForestRegressor(n_estimators = 79, max_depth= 23, min_samples_split= 21, min_samples_leaf= 3, max_features= 'sqrt', bootstrap= True)
best_model_rnd.fit(features_or_train, y_or_train)
end=time.time()
study_rfr=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', study_rfr,'c')


# In[63]:


pred_RFR_valid = best_model_rnd.predict(features_or_valid)
print('RMSE_RandomForrestRegressor =', rmse(y_or_valid, pred_RFR_valid))


# In[64]:


y_or_test


# In[65]:


features_or_test.info()


# In[66]:



start=time.time()
pred_RFR_test = best_model_rnd.predict(features_or_test)
print('RMSE_RandomForrestRegressor =', rmse(y_or_test, pred_RFR_test))
end=time.time()
pred_rfr=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', pred_rfr,'c')


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>üëç</font>

# ### DecisionTreeRegressor

# In[67]:


model_dtr = DecisionTreeRegressor()


# In[68]:


grid_params={'max_depth':[3,5,10],
              'max_features':[1,3,5,7],
              'min_samples_leaf':[1,2,3],
              'min_samples_split':[2,3]
           }


# In[69]:


grid = GridSearchCV(model_dtr,param_grid=grid_params,cv=3,scoring=scorer)

model_grid = grid.fit(Xo.iloc[train_index],y.iloc[train_index])


# In[70]:


print('Best hyperparameters are: '+str(model_grid.best_params_))
print('Best score is: '+str(model_grid.best_score_*-1))


# In[71]:


start=time.time()
best_dtr = DecisionTreeRegressor(max_depth= 10, max_features= 5, min_samples_leaf= 1, min_samples_split= 2)
best_dtr.fit(Xo.iloc[train_index],y.iloc[train_index])
end=time.time()
study_DTR=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', study_DTR,'c')


# In[72]:



start=time.time()
best_pred_dtr = best_dtr.predict(Xo.iloc[test_index])
print('RMSE_DecisionTreeRegressor =', rmse(y.iloc[test_index], best_pred_dtr))
end=time.time()
pred_DTR=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', pred_DTR,'c')


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>üëç</font>

# ### LinearRegression

# In[73]:


model_lr = LinearRegression()


# In[74]:


start=time.time()
model_lr.fit(Xo.iloc[train_index],y.iloc[train_index])
end=time.time()
study_lin=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', study_lin,'c')


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚úîÔ∏è\
# <font color='green'> –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É–µ—Ç –º–æ–¥–µ–ª–∏!</font>

# In[75]:


pred_lr_train = model_lr.predict(Xo.iloc[train_index])
print('RMSE_train =', rmse(y.iloc[train_index], pred_lr_train))


# In[76]:


start=time.time()
pred_lr_test = model_lr.predict(Xo.iloc[test_index])
print('RMSE_LR =', rmse(y.iloc[test_index], pred_lr_test))
end=time.time()
pred_lr=end-start
print('–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', pred_lr,'c')


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s> –õ–∏–Ω–µ–π–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ OHE –∫–æ–¥–∏—Ä–æ–≤–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.</s></font>

# <font color='purple'> –ü–æ–ø—Ä–∞–≤–∏–ª.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚úîÔ∏è\
# <font color='green'>üëç</font>

# ## –ê–Ω–∞–ª–∏–∑ –º–æ–¥–µ–ª–µ–π

# –ú—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è:

# In[79]:


print('RMSE_LGBM =', (rmse(y.iloc[test_index], test_pred_lgbm)))
print('RMSE_Catboost =', rmse(y.iloc[test_index], pred_cbr))
print('RMSE_RandomForrestRegressor =', rmse(y_or_test, pred_RFR_test))
print('RMSE_DecisionTreeRegressor =', rmse(y.iloc[test_index], best_pred_dtr))
print('RMSE_LinearRegression =', rmse(y.iloc[test_index], pred_lr_test))


# –ü—Ä–∏ —ç—Ç–æ–º –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:

# In[80]:


print('LGBM:', study_lgbm)
print('CatBoost :',study_cb)
print('RandomForestRegressor :',study_rfr)
print('DecisionTreeRegressor :',study_DTR)
print('LinearRegressor :',study_lin)


# –ê –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:

# In[81]:


print('LGBM:', lgbm_time_test)
print('Catboost :', pred_cb)
print('RandomForestRegressor :', pred_rfr)
print('DecisionTreeRegressor :', pred_DTR)
print('LinearRegressor :', pred_lr)


# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2: </b></font> ‚úîÔ∏è\
# <font color='green'>–ö–ª–∞—Å—Å–Ω–æ, —á—Ç–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s> –ó–∞–∫–∞–∑—á–∏–∫—É –≤–∞–∂–Ω—ã:
# –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è;
# —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è;
# –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.\
# –î–ª—è –æ—Ü–µ–Ω–∫–∏ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ (–±–µ–∑ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –ò—Ö –Ω–∞–¥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.</s></font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚ùå\
# <font color='red'><s> –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</s></font>

# <font color='Purple'><b>–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: </b></font> \
# <font color='red'> –û–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ. –ü—Ä–∏—á–µ–º –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏.</font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 3: </b></font> ‚ùå\
# <font color='blue'> –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ó–¥–µ—Å—å –Ω–µ—á–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å, —Ç–µ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–∞–º —Å–µ–±—è.</font>

# –•—É–∂–µ –≤—Å–µ–≥–æ —Å –∑–∞–¥–∞—á–µ–π —Å–ø—Ä–∞–≤–∏–ª—Å—è DecisionTreeRegressor —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º RMSE=3389, –ª—É—á—à–µ –≤—Å–µ–≥–æ —Å –∑–∞–¥–∞—á–µ–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ c–ø—Ä–∞–≤–∏–ª—Å—è –∞–Ω—Å–∞–º–±–ª—å CatBoost —Å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º RMSE=1359, –Ω–æ –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—Ç—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –µ–≥–æ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ t=6–º–∏–Ω—É—Ç 4 —Å–µ–∫—É–Ω–¥—ã. –ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö –æ–±—É—á–∏–ª—Å—è DecisionTreeRegressor t=0.068 —Å–µ–∫—É–Ω–¥—ã. –ù–æ –µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–∞–ª–µ–∫–∏ –æ—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö, RMSE=3497. –í—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –º–µ–Ω—å—à–µ —Å–µ–∫—É–Ω–¥—ã. –ü—Ä–∏—á–µ–º –±—ã—Å—Ç—Ä–µ–µ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–∏–ª—Å—è Catboost : t=0.068 —Å, –∞ –¥–æ–ª—å—à–µ –≤—Å–µ—Ö –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–ª RandomForrestRegressor: t=0.767 —Å.

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞: </b></font> ‚úîÔ∏è\
# <font color='green'>–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ–µ–∫—Ç–∞! –ü—Ä–∏–≤–µ–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≥–ª–∞–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–µ–∫—Ç–∞.</font>

# <font color='blue'><b>–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 3</b></font>\
# <font color='green'>–°–µ—Ä–≥–µ–π, –ø—Ä–æ–µ–∫—Ç –ø—Ä–∏–Ω—è—Ç! \
# –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã. \
# –ù–∞–¥–µ—é—Å—å, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.</font> \
# <font color='blue'><b>–°–ø–∞—Å–∏–±–æ, —É–¥–∞—á–∏ –≤ –æ—Å–≤–æ–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏!</b></font>

# <font color='blue'><b>–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ 2</b></font>\
# <font color='green'> –°–µ—Ä–≥–µ–π, –±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –£–¥–∞–ª–µ–Ω—ã –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –ø–æ—á–∏—â–µ–Ω—ã –≤—ã–±—Ä–æ—Å—ã, –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ–ª–µ–π –∏–∑–º–µ—Ä–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ.
# </font>
# 
# <font color='blue'>–ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</font>
# <ul><font color='red'>–ü–æ–ø—Ä–æ–±—É–π –æ–±—É—á–∏—Ç—å –¥–µ—Ä–µ–≤—å—è –≤ OE –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç —ç—Ç–æ–≥–æ –¥–æ–ª–∂–Ω–∞ —É–ª—É—á—à–∏—Ç—å—Å—è.</font></ul>
# <ul><font color='red'>–ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –ø—Ä–µ–¥–∏–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –≤—ã–¥–µ–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—É—é –≤—ã–±–æ—Ä–∫—É, –∏–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞–π –∫—Ä–æ—Å—Å–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.</font></ul>
# 
# <font color='blue'>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ:</font>
# <font color='orange'>–í —Ä–∞–±–æ—Ç–µ —è –æ—Å—Ç–∞–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤. –ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ —Ç—ã —É—á—Ç–µ—à—å –∏—Ö.</font></ul>
# 
# <font color='blue'><b>–ñ–¥—É –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞ :)</b></font>

# <font color='Purple'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞: </b></font> \
# <font color='red'> –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–º–µ–Ω–Ω–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ.</font>

# <font color='blue'><b>–ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞</b></font>\
# <font color='green'> –°–µ—Ä–≥–µ–π, —Ö–æ—Ä–æ—à–∏–π –ø—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–∏–ª—Å—è!
# –ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É. –í–∏–¥–Ω–æ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –º–Ω–æ–≥–æ —É—Å–∏–ª–∏–π.
# </font>
# 
# <font color='blue'>–ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</font>
# <ul><font color='red'>–û–±—Ä–∞–±–æ—Ç–∞–π –Ω–µ—Ä–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö.</font></ul>
# <ul><font color='red'>–ï—Å–ª–∏ —Å—Ä–µ–¥–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–º–µ—é—Ç—Å—è –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ, —É–¥–∞–ª–∏—Ç–µ –∏—Ö.</font></ul>
# <ul><font color='red'>–ò–∑–º–µ—Ä—è–π –æ—Ç–¥–µ–ª—å–Ω–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è –∏ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π. </font></ul>
# <ul><font color='red'>–ù–µ –æ–±—É—á–∞–π –≠–Ω–∫–æ–¥–µ—Ä –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.</font></ul>
# <ul><font color='red'>–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –º–æ–¥–µ–ª—è–º.</font></ul>
# <ul><font color='red'>–ü—Ä–æ–≤–µ–¥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</font></ul>
# 
# <font color='blue'>–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ:</font>
# <font color='orange'>–í —Ä–∞–±–æ—Ç–µ —è –æ—Å—Ç–∞–≤–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤. –ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ —Ç—ã —É—á—Ç–µ—à—å –∏—Ö.</font></ul>
# 
# <font color='blue'><b>–ñ–¥—É –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞ :)</b></font>

# <font color='blue'><b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ : </b></font> ‚úîÔ∏è\
# <font color='green'> –ú—ã, —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, —Ä–µ—à–∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫—É—Ä—Å—É –ø–æ —ç—Ç–æ–º—É —Å–ø—Ä–∏–Ω—Ç—É.  https://colab.research.google.com/drive/1_gAMXcQKoCShB_l8FNtYEejMnosm9mvt?usp=sharing —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ü–æ—Å–º–æ—Ç—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –ø–æ–º–æ—á—å —Å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–µ–π.</font>

# ## –ß–µ–∫-–ª–∏—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏

# –ü–æ—Å—Ç–∞–≤—å—Ç–µ 'x' –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ Shift+Enter.

# - [x]  Jupyter Notebook –æ—Ç–∫—Ä—ã—Ç
# - [x]  –í–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
# - [x]  –Ø—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
# - [x]  –ï—Å—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–µ–π
