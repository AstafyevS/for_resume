#!/usr/bin/env python
# coding: utf-8

# <div style="border:solid Chocolate 2px; padding: 40px">
# 
# <b> –°–µ—Ä–≥–µ–π, –ø—Ä–∏–≤–µ—Ç!üëã</b> 
# 
# –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–∏—Ä–∏–ª–ª –í–∞—Å–∏–ª—å–µ–≤, —è –±—É–¥—É —Ä–µ–≤—å—é–µ—Ä–æ–º —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—â–∞—Ç—å—Å—è –Ω–∞ ¬´—Ç—ã¬ª, –Ω–æ –µ—Å–ª–∏ –ø—Ä–∏–≤—ã—á–Ω–µ–µ –Ω–∞ ¬´–≤—ã¬ª, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º! 
# 
# –Ø –±—É–¥—É –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —É–¥–∞–ª—è–π –∏—Ö, –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –≤ —Å–ª—É—á–∞–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏.
# 
# –¢—ã –º–æ–∂–µ—à—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ –∏—Ö –≤ Markdown-—è—á–µ–π–∫–∞—Ö, —Ç–∞–∫ –∏ –≤—ã–¥–µ–ª–∏–≤ –∏—Ö —Ü–≤–µ—Ç–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä, <font color='blue'>—Å–∏–Ω–∏–º</font>. –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±, –Ω–∞ –º–æ–π –≤–∑–≥–ª—è–¥, —É–¥–æ–±–Ω–µ–µ.
# 
# –°–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —è –±—É–¥—É –æ–±–æ–∑–Ω–∞—á–∞—Ç—å <font color='green'>–∑–µ–ª–µ–Ω—ã–º</font>, <font color='gold'>–∂–µ–ª—Ç—ã–º</font> –∏ <font color='red'>–∫—Ä–∞—Å–Ω—ã–º</font> —Ü–≤–µ—Ç–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
#  
# <br/>
# 
# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
# 
# <b>–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!üëç:</b> –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º. –ó–¥–µ—Å—å –∂–µ —è –º–æ–≥—É –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
# </div>
# 
# <br/>
# 
# <div class="alert alert-warning">
#     <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ, –µ—Å–ª–∏ –≤–Ω–µ—Å—Ç–∏ –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏–≤—ã.
# </div>
# 
# 
# <br/>
# <div class="alert alert-block alert-danger">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
# 
#     
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  –í —Å–ª—É—á–∞–µ, –∫–æ–≥–¥–∞ —Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Ç—Ä–µ–±—É–µ—Ç —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–Ω—è—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞, –µ—Å–ª–∏ —Ä–µ–≤—å—é —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—â–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å —à–∞–≥–∏.
# </div>
#     
# –£–≤–∏–¥–µ–≤ —É —Ç–µ–±—è –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç—å, –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —è –ª–∏—à—å —É–∫–∞–∂—É –Ω–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –¥–∞–º —Ç–µ–±–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–µ. –ù–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Ç–≤–æ–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–∞–∫–∂–µ. –ù–æ –µ—Å–ª–∏ —Ç—ã –ø–æ–∫–∞ –Ω–µ —Å–ø—Ä–∞–≤–∏—à—å—Å—è —Å —Ç–∞–∫–æ–π –∑–∞–¥–∞—á–µ–π - –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —è –¥–∞–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É! 

# <h1>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ<span class="tocSkip"></span></h1>
# <div class="toc"><ul class="toc-item"><li><span><a href="#–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö" data-toc-modified-id="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞-–¥–∞–Ω–Ω—ã—Ö-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö</a></span><ul class="toc-item"><li><span><a href="#–ü—Ä–æ–≤–µ—Ä–∏–º-–µ—Å—Ç—å-–ª–∏-–ø—Ä–æ–ø—É—Å–∫–∏-–≤-–¥–∞–Ω–Ω—ã—Ö" data-toc-modified-id="–ü—Ä–æ–≤–µ—Ä–∏–º-–µ—Å—Ç—å-–ª–∏-–ø—Ä–æ–ø—É—Å–∫–∏-–≤-–¥–∞–Ω–Ω—ã—Ö-1.1"><span class="toc-item-num">1.1&nbsp;&nbsp;</span>–ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö</a></span></li></ul></li><li><span><a href="#–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏" data-toc-modified-id="–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ-–∑–∞–¥–∞—á–∏-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</a></span></li><li><span><a href="#–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º" data-toc-modified-id="–ë–æ—Ä—å–±–∞-—Å-–¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>–ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º</a></span><ul class="toc-item"><li><span><a href="#" data-toc-modified-id="-3.1"><span class="toc-item-num">3.1&nbsp;&nbsp;</span><div class="alert alert-warning"></div></a></span></li></ul></li><li><span><a href="#–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏" data-toc-modified-id="–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-–º–æ–¥–µ–ª–∏-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏</a></span></li><li><span><a href="#–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞" data-toc-modified-id="–ß–µ–∫-–ª–∏—Å—Ç-–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏-–ø—Ä–æ–µ–∫—Ç–∞-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>–ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</a></span></li></ul></div>

# # –û—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤

# –ò–∑ ¬´–ë–µ—Ç–∞-–ë–∞–Ω–∫–∞¬ª —Å—Ç–∞–ª–∏ —É—Ö–æ–¥–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—ã. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü. –ù–µ–º–Ω–æ–≥–æ, –Ω–æ –∑–∞–º–µ—Ç–Ω–æ. –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–∏ –ø–æ—Å—á–∏—Ç–∞–ª–∏: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–µ–∫—É—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–µ—à–µ–≤–ª–µ, —á–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –Ω–æ–≤—ã—Ö.
# 
# –ù—É–∂–Ω–æ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å, —É–π–¥—ë—Ç –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–µ—Ç. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–æ–≤ —Å –±–∞–Ω–∫–æ–º. 
# 
# –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª—å —Å –ø—Ä–µ–¥–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º *F1*-–º–µ—Ä—ã. –ß—Ç–æ–±—ã —Å–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–≤–µ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫—É –¥–æ 0.59. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ *F1*-–º–µ—Ä—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.
# 
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ—Ä—è–π—Ç–µ *AUC-ROC*, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ —Å *F1*-–º–µ—Ä–æ–π.
# 
# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: [https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling](https://www.kaggle.com/barelydedicated/bank-customer-churn-modeling)

# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
# 
# üëç –û—Ç–ª–∏—á–Ω–æ. –ï—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞. –Ø—Å–Ω—ã —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏. –í–∏–¥–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏.
# </div>

# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–æ—á–Ω–æ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ markdown?
#        
# </div>
# 

# In[1]:


get_ipython().system('pip install imblearn')


# In[2]:


import warnings
warnings.filterwarnings('ignore')

import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams, rcParamsDefault

from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.preprocessing import OrdinalEncoder
from sklearn.utils import shuffle
from sklearn.metrics import (
    accuracy_score, 
    confusion_matrix, 
    f1_score, 
    mean_squared_error, 
    roc_auc_score,
    mean_absolute_error,
    precision_score,
    precision_recall_curve,
    recall_score
)
from sklearn.preprocessing import StandardScaler, MinMaxScaler

from sklearn.datasets import make_circles, make_classification, make_regression

from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import train_test_split
from sklearn.model_selection import validation_curve
from collections import Counter
from sklearn.datasets import make_classification


# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
#     
# –í—Å–µ –ª–∏ –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—ã—à–µ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. GridSearchCV? 
#     
# –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –æ–¥–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞, —Ç–æ —É–¥–æ–±–Ω–µ–µ –∑–∞–ø–∏—Å–∞—Ç—å —ç—Ç–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
#     
# –ò –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –∏–¥–µ–∞–ª—å–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å <a href="https://pythonworld.ru/osnovy/pep-8-rukovodstvo-po-napisaniyu-koda-na-python.html">pep8</a> - –Ω–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫. 
# 
# –¢–∞–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ:    
#     
# `from sklearn.metrics import (
#     accuracy_score, 
#     confusion_matrix, 
#     f1_score, 
#     mean_squared_error, 
#     roc_auc_score
# )`
#     
#         
# </div>
# 

# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class="tocSkip"> </h2>
# 
# üëç –ó–¥–µ—Å—å –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ.
# </div>

# In[3]:


pd.set_option('display.max_columns', None)
pd.options.display.float_format = '{:.2f}'.format
pd.options.mode.chained_assignment = None

rcParams['figure.figsize'] = 10,10
get_ipython().run_line_magic('config', "InlineBackend.figure_format = 'svg'")
get_ipython().run_line_magic('matplotlib', 'inline')
factor = 1
default_dpi = rcParamsDefault['figure.dpi']
rcParams['figure.dpi'] = default_dpi*factor


# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ê —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–∂–µ –Ω–µ –∫–æ–¥?
#        
# </div>
# 
# 

# ## –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö

# In[4]:


data = pd.read_csv('/datasets/Churn.csv')
display(data.info())
display(data)


# ### –ü—Ä–æ–≤–µ—Ä–∏–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö

# In[5]:


data.isna().sum()


# –í —Å—Ç–æ–ª–±—Ü–µ "Tenure" —É–∫–∞–∑–∞–Ω–æ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –∫–ª–∏–µ–Ω—Ç –æ–±—Å—É–ª–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±–∞–Ω–∫–µ. –ó–∞–º–µ–Ω–∏–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –Ω—É–ª–µ–≤—ã–µ, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–≤, —á—Ç–æ —ç—Ç–æ –∫–ª–∏–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ –ø–æ–ª—å—Ö–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º –±–∞–Ω–∫–æ–º –º–µ–Ω—å—à–µ –≥–æ–¥–∞ –Ω–∞–∑–∞–¥.

# In[6]:


data=data.fillna(data['Tenure'].median())


# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ü—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∏ —Ç–∞–º, –≥–¥–µ –∫–ª–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª –Ω–µ–¥–∞–≤–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–µ–ø–ª–æ—Ö–æ–µ. –ù–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ —Å–µ–π—á–∞—Å –º—ã –Ω–µ –º–æ–∂–µ–º. –ü–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—É, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Ç–∞–∫–∏–º–∏ –∂–µ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é, –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ, –∏ –ª—É—á—à–µ–π —Ç–∞–∫—Ç–∏–∫–æ–π –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –±—É–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω–µ –∏–∑–º–µ–Ω—è—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–∞. 
#     
# –î–æ–ª—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –≤–µ–ª–∏–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –∏ —Ä–µ—à–µ–Ω–∏–µ —Å —É–¥–∞–ª–µ–Ω–∏–µ–º. –û–¥–Ω–∞–∫–æ –¥–∞–Ω–Ω—ã—Ö —É –Ω–∞—Å –Ω–µ –º–Ω–æ–≥–æ, —è –±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —á–µ–º-—Ç–æ –≤—Ä–æ–¥–µ –º–µ–¥–∏–∞–Ω—ã.
# 
# </div>
# 
# 
# 

# In[7]:


data.describe(include='all')


# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
# 
# üëç –û—Ç–ª–∏—á–Ω–æ. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –∏ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º —Å –Ω–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
#       
# `describe(include='all')`
#     
# –í–æ–∑–º–æ–∂–Ω–æ, —É–¥–æ–±–Ω–µ–µ –±—É–¥–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É.
# </div>
# 

# In[8]:


fig, ax = plt.subplots(figsize=(12, 7))
_ = sns.heatmap(data.corr(), vmin=-1, vmax=1, annot=True, ax=ax)


# In[9]:


data = data.drop(columns=['Surname', 'CustomerId', 'RowNumber'])


# In[10]:


data_ohe = pd.get_dummies(data, drop_first=True)


# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
# 
# üëç –°–æ–≥–ª–∞—Å–µ–Ω. –í –¥–∞–º–º–∏-–ª–æ–≤—É—à–∫—É –Ω–µ –ø–æ–ø–∞–ª–∏—Å—å.
# </div>

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ü–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å, –ª–∏–±–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å (–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ –∫–æ–¥).
# 
# </div>
# 

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∏ –ª–∏—à–Ω–∏—Ö –∫–æ–ª–æ–Ω–∫–∏. –ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ —É –Ω–∞—Å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ 3 —Ç—ã—Å—è—á–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–∑-–∑–∞ —ç–Ω–∫–æ–¥–∏–Ω–≥–∞ —Ñ–∞–º–∏–ª–∏–π. –ê–π–¥–∏—à–Ω–∏–∫–∏ –∏ –Ω–æ–º–µ—Ä–∞ –º–æ–¥–µ–ª–∏ —Ç–æ–∂–µ –Ω–µ –ø–æ–º–æ–≥—É—Ç. –ù–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –≤–∏–¥–∏—Ç –æ–¥–∏–Ω —Ä–∞–∑, –æ–Ω–∞ –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ —Å–¥–µ–ª–∞—Ç—å –æ–±–æ–±—â–µ–Ω–∏–µ.
# 
# </div>
# 
# 
# 

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ù—É–∂–µ–Ω –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–µ.
# 
# </div>
# 
# 
# 

# –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –º—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ–¥–∏–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º, —É–¥–∞–ª–∏–ª–∏ 3 –∫–æ–ª–æ–Ω–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —É–π–¥–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç –∏–∑ –±–∞–Ω–∫–∞. –ê —Ç–∞–∫–∂–µ –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–≤–µ–ª–∏ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—É.

# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
#  
# –ó–¥–µ—Å—å –ø–æ –ø—Ä–æ–µ–∫—Ç—É –º—ã –¥–æ–ª–∂–Ω—ã –≤—ã–±—Ä–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ (ROC-AUC –∑–∞ –Ω–∞—Å –≤—ã–±—Ä–∞–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—á–∏—Ç–∞—Ç—å –≤–µ–∑–¥–µ. –ü—Ä–æ f1-–º–µ—Ä—É —Ç–∞–∫–∂–µ —Å–∫–∞–∑–∞–Ω–æ, —á—Ç–æ –µ–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏ –¥–æ–≤–µ—Å—Ç–∏ –¥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è). –ü–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –Ω–∞–º –≤–∞–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –±–∏–∑–Ω–µ—Å–∞: –Ω–∞–π—Ç–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∑–∞—Ö–æ—Ç–µ—Ç—å —É–π—Ç–∏ –∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –æ—Ç–¥–µ–ª–∏—Ç—å —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —É–π—Ç–∏ –æ—Ç —Ç–µ—Ö, –∫—Ç–æ –±—ã –æ—Å—Ç–∞–ª—Å—è? –ù—É–∂–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏ —Ç–æ–≥–æ, –∫–∞–∫–∏–µ –∏–∑ –Ω–∏—Ö –≤–∞–∂–Ω–µ–µ.
#     
# –ó–¥–µ—Å—å –∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å.
#     
# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –≤ —É–º–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ¬´–¥–∞–º–º–∏-–∫–ª–∞—Å—Å–∏—Ñ–∞–π–µ—Ä¬ª https://scikit-learn.org/stable/modules/generated/sklearn.dummy.DummyClassifier.html .
# 
# </div>
# 

# ## –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏

# In[11]:


# –†–∞–∑–¥–µ–ª–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫ –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
target = data_ohe['Exited']
features = data_ohe.drop(['Exited'] , axis=1)
# –†–∞–∑–¥–µ–ª–∏–º –≤—ã–±–æ—Ä–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é
features_train, features_temp, target_train, target_temp = train_test_split(
    features, target, test_size=0.5, random_state=12345)
features_valid, features_test, target_valid, target_test rm= train_test_split(
    features_temp, target_temp, test_size=0.5, random_state=12345)


# In[12]:


numeric = ['CreditScore', 'Age', 'Tenure', 'Balance', 'NumOfProducts', 'EstimatedSalary']
scaler = StandardScaler()
scaler = scaler.fit(features_train[numeric])


# In[13]:


features_train[numeric] = scaler.transform(features_train[numeric])
features_valid[numeric] = scaler.transform(features_valid[numeric])
features_test[numeric] = scaler.transform(features_test[numeric])


# 
# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ö–∞–∂–µ—Ç—Å—è, –∑–∞–±—ã–ª–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É!
# 
# </div>
# 

# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
# 
# üëç –° —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –≤—ã–±–æ—Ä–æ–∫ —Å–æ–≥–ª–∞—Å–µ–Ω. –ù–µ —É–≤–∏–¥–µ–ª –ø–æ–∫–∞ —Ç–µ—Å—Ç–æ–≤—É—é, –Ω–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º –¥–∞–ª—å—à–µ.
# </div>
# 

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –î–∞–ª–µ–µ –ø—Ä–∏ –ø–æ–¥–±–æ—Ä–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –≤—ã–±–æ—Ä–∫—É. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±—É–¥–µ—Ç –Ω–µ –Ω–∞ —á–µ–º. –ù—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏.
# 
# </div>

# <div class="alert alert-info"> <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> –†–∞–∑–±–∏–ª –¥–æ–±–∞–≤–∏–≤ —Ç–µ—Å—Ç–æ–≤—É—é.</div>

# –£–∑–Ω–∞–µ–º —ç—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –Ω–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

# In[14]:


model_libl = LogisticRegression(random_state=12345, solver='liblinear')
model_libl.fit(features_train, target_train)
predictions_valid_libl = model_libl.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_libl))
probabilities_valid = model_libl.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# <div class="alert alert-block alert-danger">
# <h2> <s>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ó–¥–µ—Å—å –ø–æ –∑–∞–¥–∞–Ω–∏—é —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –º–æ–¥–µ–ª–∏ –±–µ–∑ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º. class_weight='balanced' –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–µ—Ç–æ–¥–∞–º –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º. –ó–¥–µ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–µ–≤–µ—Ä–Ω–æ, –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å —ç—Ç–æ –Ω–∞ –ø–æ—Ç–æ–º.
# 
# </div>

# <div class="alert alert-info"> <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> –£–¥–∞–ª–∏–ª –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É.</div>

# In[15]:


model_log = LogisticRegression(random_state=12345, solver='liblinear')
model_log.fit(features_train, target_train)
predictions_valid_log = model_log.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_log))
probabilities_valid = model_log.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[16]:


model_sag = LogisticRegression(random_state=12345, solver='sag')
model_sag.fit(features_train, target_train)
predictions_valid_sag = model_sag.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_sag))
probabilities_valid = model_sag.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# –û—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–ª—å–≤–µ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è

# In[17]:


valid_scores = []
train_scores = []

best_max_depth = 1
best_score = 0
param_range = list(range(1,50))

for n in param_range:
    model = DecisionTreeClassifier(max_depth=n, random_state=12345)
    model.fit(features_train, target_train)
    valid_preds = model.predict(features_valid)
    train_preds = model.predict(features_train)

    train_scores.append(f1_score(target_train, train_preds))
    valid_scores.append(f1_score(target_valid, valid_preds))
    
    if f1_score(target_valid, valid_preds) > best_score:
        best_score = f1_score(target_valid, valid_preds)
        best_max_depth = n
        
print(f'–õ—É—á—à–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {best_max_depth}')
print(f'–õ—É—á—à–∞—è –º–µ—Ç—Ä–∏–∫–∞: {best_score}')

model_d = DecisionTreeClassifier(max_depth = best_max_depth, random_state=12345, class_weight='balanced')
model_d.fit(features_train, target_train)
predictions_valid_d = model_d.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_d))
probabilities_valid = model_d.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –∫–æ–¥, –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å.
#        
# </div>
# 

# In[18]:


best_model_r=0
best_result_r=0
for depth in range(1, 50, 1):
    model_r = RandomForestClassifier(n_estimators=175, max_depth=depth, random_state=12345)
    model_r.fit(features_train, target_train)
    predictions_valid_r=model_r.predict(features_valid)
    mae_r=f1_score(predictions_valid_r, target_valid)
    if mae_r > best_result_r:
        best_result_r=mae_r
        best_model_r=model_r
print(best_result_r)
print(best_model_r)
model_r = best_model_r
model_r.fit(features_train, target_train)
predictions_valid_r = model_r.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_r))
probabilities_valid = model_r.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# –ú–æ–¥–µ–ª—å DecisionTreeClassifier –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≥–ª—É–±–∏–Ω–æ–π –¥–µ—Ä–µ–≤–∞ = 6 –∏ –Ω–∞–∏–ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ–æ–±—â–µ

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –í –¥–µ—Ä–µ–≤–µ –∏ –ª–µ—Å–µ –≤–∞–∂–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –í –¥–µ—Ä–µ–≤–µ - –≥–ª—É–±–∏–Ω—É, –≤ –ª–µ—Å–µ - –º–∏–Ω–∏–º—É–º –≥–ª—É–±–∏–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω—â–∏–∫–æ–≤ (—ç—Å—Ç–∏–º–∞—Ç–æ—Ä–æ–≤, –¥–µ—Ä–µ–≤—å–µ–≤).
# 
# </div>
# 
# 
# 

# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ: –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã—à–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –∫–æ–¥, –ª–∏–±–æ —É–¥–∞–ª–∏—Ç—å.
#        
# </div>

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å —Å –∫–∞–∫–∏–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞ –∫–∞–∫–æ–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç F1
# </div>
# 
# 
# 

# ## –ë–æ—Ä—å–±–∞ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –°–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—É—á–∞–µ–º –±–µ–∑ —É—á–µ—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞.
# 
# </div>
# 

# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ù—É–∂–Ω–æ –∫—Ä–∞—Ç–∫–æ –æ–±–æ–∑–Ω–∞—á–∏—Ç—å, –∫–∞–∫—É—é –º–µ—Ç–æ–¥–∏–∫—É –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º –∑–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω—è–µ–º. –ö–∞–∫ –≤–∏–¥–Ω–æ –¥–∞–ª—å—à–µ ‚àí –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã.
#        
# </div>

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤

# In[19]:


model_libl = LogisticRegression(random_state=12345, solver='liblinear', class_weight='balanced')
model_libl.fit(features_train, target_train)

preds_libl = model_libl.predict(features_valid)
print("F1:", f1_score(target_valid, preds_libl))
probabilities_valid = model_libl.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[20]:


model_lbf = LogisticRegression(random_state=12345, solver='lbfgs', class_weight='balanced')
model_lbf.fit(features_train, target_train)

preds_lbf = model_lbf.predict(features_valid)
print("F1:", f1_score(target_valid, preds_lbf))
probabilities_valid = model_lbf.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[21]:


model_sag = LogisticRegression(random_state=12345, solver='sag', class_weight='balanced')
model_sag.fit(features_train, target_train)

preds = model_sag.predict(features_valid)
print("F1:", f1_score(target_valid, preds))
probabilities_valid_sag= model_sag.predict_proba(features_valid)
probabilities_one_valid_sag = probabilities_valid_sag[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid_sag)
print('AUC-ROC:', auc_roc)


# In[22]:


valid_scores = []
train_scores = []

best_max_depth = 1
best_score = 0
param_range = list(range(1,50))

for n in param_range:
    model = DecisionTreeClassifier(max_depth=n, random_state=12345, class_weight='balanced')
    model.fit(features_train, target_train)
    valid_preds = model.predict(features_valid)
    train_preds = model.predict(features_train)

    train_scores.append(f1_score(target_train, train_preds))
    valid_scores.append(f1_score(target_valid, valid_preds))
    
    if accuracy_score(target_valid, valid_preds) > best_score:
        best_score = f1_score(target_valid, valid_preds)
        best_max_depth = n
        
print(f'–õ—É—á—à–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {best_max_depth}')
print(f'–õ—É—á—à–∞—è –º–µ—Ç—Ä–∏–∫–∞: {best_score}')

model_d = DecisionTreeClassifier(max_depth = best_max_depth, random_state=12345, class_weight='balanced')
model_d.fit(features_train, target_train)
predictions_valid_d = model_d.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_d))
probabilities_valid = model_d.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[23]:


best_model_r=0
best_result_r=0
for depth in range(1, 50, 1):
    model_r = RandomForestClassifier(n_estimators=80, max_depth=depth, random_state=12345, class_weight='balanced')
    model_r.fit(features_train, target_train)
    predictions_valid_r=model_r.predict(features_valid)
    mae_r=f1_score(predictions_valid_r, target_valid)
    if mae_r > best_result_r:
        best_result_r=mae_r
        best_model_r=model_r
print(best_result_r)
print(best_model_r)
model_r = best_model_r
model_r.fit(features_train, target_train)
predictions_valid_r = model_r.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_r))
probabilities_valid = model_r.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –∫–ª–∞—Å—Å–æ–≤ —Å–∏–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–æ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–µ–π. –ü—Ä–∏ –¥–∞–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å —ç—Ç–æ RandomForestClassifier —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–ª—É–±–∏–Ω–æ–π-12 –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç—Å—Ç–∏–º–∞—Ç–æ—Ä–æ–≤-80.

# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ –∂–µ –º–æ–¥–µ–ª–∏, —á—Ç–æ –∏ –≤—ã—à–µ, –æ–ø–∏—Å–∞—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å.
#        
# </div>

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ó–¥–µ—Å—å –∫—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –º–æ–¥–µ–ª—è–º–∏. –ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫–æ–π –ø–ª–∞–Ω:
#     
# –í—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª–∏: —Ç—Ä–∏ - —Ä–µ–≥—Ä–µ—Å—Å–∏—è, –¥–µ—Ä–µ–≤–æ, –ª–µ—Å. –ü–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∞ –Ω–∏—Ö –±–µ–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞, –ø–æ–¥–æ–±—Ä–∞–ª–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏ –ª—É—á—à—É—é –º–æ–¥–µ–ª—å.
#     
# –î–∞–ª—å—à–µ —Ç–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –±–æ—Ä—å–±–µ —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º: —Å–¥–µ–ª–∞–ª–∏ –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥, –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∏ —Å –Ω–∏–º —Ç—Ä–∏ –º–æ–¥–µ–ª–∏, –≤—ã–±—Ä–∞–ª–∏ –ª—É—á—à—É—é, –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–Ω—É–∂–Ω–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏).
#     
# –í—Å–µ —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ –≤—Å–µ–º–∏ –º–æ–¥–µ–ª—è–º–∏ –ø—Ä–æ–¥–µ–ª–∞—Ç—å –¥–ª—è –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–∞, –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥–∞ –∏ –≤–∑–≤–µ—à–µ–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.
#     
# –í–µ–∑–¥–µ –∏–∑–º–µ—Ä—è–µ–º ROC-AUC.
# 
# 
# </div>

# –ò—Å—Å–ª–µ–¥—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–æ—Ä—å–±—ã —Å –¥–∏–∑–±–∞–ª–∞–Ω—Å–æ–º —Å –ø–æ–º–æ—â—å—é Upsampling

# In[24]:


def upsample(features, target, repeat):
    features_zeros = features[target == 0]
    features_ones = features[target == 1]
    target_zeros = target[target == 0]
    target_ones = target[target == 1]

    features_upsampled = pd.concat([features_zeros] + [features_ones] * repeat)
    target_upsampled = pd.concat([target_zeros] + [target_ones] * repeat)
    
    features_upsampled, target_upsampled = shuffle(
        features_upsampled, target_upsampled, random_state=12345)
    
    return features_upsampled, target_upsampled

features_upsampled, target_upsampled = upsample(features_train, target_train, 4)


# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ê–ø—Å–µ–º–ø–ª–∏–Ω–≥ –¥–µ–ª–∞–µ–º –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∞—Å—Å–æ–≤ 1:1. –£ –Ω–∞—Å –±—ã–ª–æ 1:4, –º—ã —É–º–Ω–æ–∂–∏–ª–∏ –Ω–∞ 10, —Ç–µ–ø–µ—Ä—å –¥–∏—Å–±–∞–ª–∞–Ω—Å –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–¥–∞–µ—à—å –≤ —Ñ—É–Ω–∫—Ü–∏—é, –≤–º–µ—Å—Ç–æ 10 –Ω—É–∂–Ω–æ 4. –ü—Ä–∏ –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥–µ —Ç–∞–∫–∞—è –∂–µ –æ—à–∏–±–∫–∞, —Ç–∞–º –≤–º–µ—Å—Ç–æ 0.1 –Ω—É–∂–Ω–æ 0.25.
# 
# </div>
# 

# <div class="alert alert-success">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
# 
# üëç –û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ä—É–∫–æ–ø–∏—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è <a href="https://imbalanced-learn.org/stable/references/generated/imblearn.over_sampling.SMOTE.html">SMOTE</a> –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∫–∏ –∏ <a href="https://imbalanced-learn.org/stable/references/generated/imblearn.under_sampling.RandomUnderSampler.html">RandomUnderSampler</a>  –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è. 
#     
# –ê–ø—Å–µ–º–ø–ª–∏–Ω–≥ –¥–µ–ª–∞–µ—Ç—Å—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ:
#     
# `oversample = SMOTE(random_state=RANDOM_STATE)`
# 
# `features_train_up, target_train_up = oversample.fit_resample(features_train_enc, target_train)`
#     
# *–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∏–º–ø–æ—Ç—Ä–∏—Ä–æ–≤–∞–≤ `from imblearn.over_sampling import SMOTE`
# 
# **–ß—Ç–æ–±—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å imblearn –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–∏–Ω—Å—Ç–∞–ª–ª–∏—Ä–æ–≤–∞—Ç—å. —á–µ—Ä–µ–∑ `!pip install imblearn`
#     
# </div>

# <div class="alert alert-info"> <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç–∞:</b> –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å SMOTE</div>

# <div style="border:solid Lime 2px; padding: 40px">
# <font color=Blue>
# 
# 
# <div class="alert alert-success"  style="border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid ">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #2 <a class="tocSkip"> </h2>    
# 
# üëç –û–∫, —Ç–æ–≥–¥–∞ –±–µ–∑ –Ω–µ–≥–æ –ø–æ–∫–∞.
# </div>
# 

# <div style="border:solid Lime 2px; padding: 40px">
# <font color=Blue>
# 
# 
# <div class="alert alert-success"  style="border-radius: 15px; box-shadow: 4px 4px 4px; border: 1px solid ">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ #3 <a class="tocSkip"> </h2>    
# 
# üëç UPD –í–∏–¥–∏–º–æ, –ø—Ä–æ–±–ª–µ–º–∞ –≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –ó–∞ —Å—É—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–ø–∏—Å–∞–ª–∏, —á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è. –î–æ —ç—Ç–æ–≥–æ –Ω–µ –±—ã–ª–æ —Ç–∞–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.
# </div>

# In[25]:


valid_scores = []
train_scores = []

best_max_depth = 1
best_score = 0
param_range = list(range(1,50))

for n in param_range:
    model = DecisionTreeClassifier(max_depth=n, random_state=12345)
    model.fit(features_upsampled, target_upsampled)
    valid_preds = model.predict(features_valid)
    train_preds = model.predict(features_upsampled)

    train_scores.append(f1_score(target_upsampled, train_preds))
    valid_scores.append(f1_score(target_valid, valid_preds))
    
    if f1_score(target_valid, valid_preds) > best_score:
        best_score = f1_score(target_valid, valid_preds)
        best_max_depth = n
        
print(f'–õ—É—á—à–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {best_max_depth}')
print(f'–õ—É—á—à–∞—è –º–µ—Ç—Ä–∏–∫–∞: {best_score}')

model_d = DecisionTreeClassifier(max_depth = best_max_depth, random_state=12345)
model_d.fit(features_upsampled, target_upsampled)
predictions_valid_d = model_d.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_d))
probabilities_valid = model_d.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[26]:


model_libl = LogisticRegression(random_state=12345, solver='liblinear')
model_libl.fit(features_upsampled, target_upsampled)

preds_libl = model_libl.predict(features_valid)
print("F1:", f1_score(target_valid, preds_libl))
probabilities_valid = model_libl.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[40]:


best_model_r=0
best_result_r=0
for depth in range(1, 50, 1):
    model_r = RandomForestClassifier(n_estimators=115, max_depth=depth, random_state=12345)
    model_r.fit(features_upsampled, target_upsampled)
    predictions_valid_r=model_r.predict(features_valid)
    mae_r=f1_score(predictions_valid_r, target_valid)
    if mae_r > best_result_r:
        best_result_r=mae_r
        best_model_r=model_r
print(best_result_r)
print(best_model_r)
model_r = best_model_r
model_r.fit(features_upsampled, target_upsampled)
predictions_valid_r = model_r.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_r))
probabilities_valid = model_r.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Upsampling –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —É—Ö—É–¥—à–∏–ª–æ—Å—å, –Ω–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —ç—Å—Ç–∏–º–∞—Ç–æ—Ä–æ–≤ –≤ RandomForestClassifier —É–¥–∞–ª–æ—Å—å —Ç–∞–∫–∂–µ –¥–æ—Å—Ç–∏—á –º–µ—Ç—Ä–∏–∫–∏ F1=0.59

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ë—É–¥–µ—Ç –æ—à–∏–±–æ—á–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∞–ø—Å–µ–ø–ª–∏–Ω–≥ –∏–ª–∏ –¥–∞—É–Ω—Å–µ–º–ø–ª–∏–Ω–≥ –∏ –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã class_weight='balanced'. –ú—ã –∏ —Ç–∞–∫ –¥–æ–≤–æ–¥–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –∫ 1:1, —Ç–∞–∫ —á—Ç–æ, class_weight —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ø–∞–¥–µ–Ω–∏—é –∫–æ–¥–∞ –∏–ª–∏ —É—Ö—É–¥—à–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω–æ –∏ –∫ —É–ª—É—á—à–µ–Ω–∏—é –Ω–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏), —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∂–µ —Ç–∞–∫–æ–π –∫–æ–¥ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –º—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ–º –º–µ—Ö–∞–Ω–∏–∑–º–∞ —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ, —Ç–µ—Ö–Ω–∏–∫–∏ –±–æ—Ä—å–±—ã —Å –¥–∏–±—Å–∞–ª–∞–Ω—Å–æ–º.
# 
# </div>
# 

# –ò—Å—Å–ª–µ–¥—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–æ—Ä—å–±—ã —Å –¥–∏–∑–±–∞–ª–∞–Ω—Å–æ–º —Å –ø–æ–º–æ—â—å—é Downsampling

# In[28]:


def downsample(features, target, fraction):
    features_zeros = features[target == 0]
    features_ones = features[target == 1]
    target_zeros = target[target == 0]
    target_ones = target[target == 1]

    features_downsampled = pd.concat(
        [features_zeros.sample(frac=fraction, random_state=12345)] + [features_ones])
    target_downsampled = pd.concat(
        [target_zeros.sample(frac=fraction, random_state=12345)] + [target_ones])
    
    features_downsampled, target_downsampled = shuffle(
        features_downsampled, target_downsampled, random_state=12345)
    
    return features_downsampled, target_downsampled

features_downsampled, target_downsampled = downsample(features_train, target_train, 0.25)


# In[29]:


model_libl = LogisticRegression(random_state=12345, solver='liblinear')
model_libl.fit(features_downsampled, target_downsampled)

preds_libl = model_libl.predict(features_valid)
print("F1:", f1_score(target_valid, preds_libl))
probabilities_valid = model_libl.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[30]:


valid_scores = []
train_scores = []

best_max_depth = 1
best_score = 0
param_range = list(range(1,50))

for n in param_range:
    model = DecisionTreeClassifier(max_depth=n, random_state=12345)
    model.fit(features_downsampled, target_downsampled)
    valid_preds = model.predict(features_valid)
    train_preds = model.predict(features_downsampled)

    train_scores.append(f1_score(target_downsampled, train_preds))
    valid_scores.append(f1_score(target_valid, valid_preds))
    
    if f1_score(target_valid, valid_preds) > best_score:
        best_score = f1_score(target_valid, valid_preds)
        best_max_depth = n
        
print(f'–õ—É—á—à–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞: {best_max_depth}')
print(f'–õ—É—á—à–∞—è –º–µ—Ç—Ä–∏–∫–∞: {best_score}')

model_d = DecisionTreeClassifier(max_depth = best_max_depth, random_state=12345)
model_d.fit(features_downsampled, target_downsampled)
predictions_valid_d = model_d.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_d))
probabilities_valid = model_d.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# In[31]:


best_model_r=0
best_result_r=0
for depth in range(1, 50, 1):
    model_r = RandomForestClassifier(n_estimators=100, max_depth=depth, random_state=12345)
    model_r.fit(features_downsampled, target_downsampled)
    predictions_valid_r=model_r.predict(features_valid)
    mae_r=f1_score(predictions_valid_r, target_valid)
    if mae_r > best_result_r:
        best_result_r=mae_r
        best_model_r=model_r
print(best_result_r)
print(best_model_r)
model_r = best_model_r
model_r.fit(features_downsampled, target_downsampled)
predictions_valid_r = model_r.predict(features_valid)
print("F1:", f1_score(target_valid, predictions_valid_d))
probabilities_valid = model_r.predict_proba(features_valid)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_valid, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# Downsampling —É—Ö—É–¥—à–∏–ª –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π

# ### <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –í–µ–∑–¥–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
#        
# </div>

# In[32]:


for threshold in np.arange(0, 1, 0.1):
    predicted_valid = probabilities_one_valid > threshold 
    precision = precision_score(target_valid, predicted_valid)
    recall = recall_score(target_valid, predicted_valid)
    ff1_score = f1_score(target_valid, predicted_valid)
    print("–ü–æ—Ä–æ–≥ = {:.2f} | –¢–æ—á–Ω–æ—Å—Ç—å = {:.3f} | –ü–æ–ª–Ω–æ—Ç–∞ = {:.3f} | F1 = {:.3f}".format(
          threshold, precision, recall, ff1_score))
print('\n')


# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
#     
# –ó–¥–µ—Å—å –ø–æ –∫–æ–¥—É –≤—Å–µ –±–æ–ª–µ–µ –∏–ª–∏ –º–µ–Ω–µ–µ –≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–µ, –ø–æ—Å–º–æ—Ç—Ä–∏–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∑–¥–µ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ –≤–∑—è—Ç—å –±–æ–ª—å—à–µ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–µ —Ç–æ–ª—å–∫–æ –≤ —Ç—Ä–∏ –¥–µ—Å—è—Ç—ã—Ö.
# 
# `for threshold in np.arange(0, 1, 0.1):
#     predicted_valid = probabilities_one_valid > threshold 
#     precision = precision_score(target_valid, predicted_valid)
#     recall = recall_score(target_valid, predicted_valid)
#     ff1_score = f1_score(target_valid, predicted_valid)
#     print("–ü–æ—Ä–æ–≥ = {:.2f} | –¢–æ—á–Ω–æ—Å—Ç—å = {:.3f} | –ü–æ–ª–Ω–æ—Ç–∞ = {:.3f} | F1 = {:.3f}".format(
#           threshold, precision, recall, ff1_score))
# print('\n')`
# 
#        
# </div>

# –ù–∞–∏–±–æ–ª—å—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ –≤ 0.90, –∞ –Ω–∞–∏–±–æ–ª—å—à–∞—è F1 –ø—Ä–∏ –ø–æ—Ä–æ–≥–µ 0.70

# In[33]:


model = LogisticRegression(random_state=12345, solver='liblinear')
model.fit(features_train, target_train)

probabilities_valid = model.predict_proba(features_valid)
precision, recall, thresholds = precision_recall_curve(target_valid, probabilities_valid[:, 1])

plt.figure(figsize=(6, 6))
plt.step(recall, precision, where='post')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.ylim([0.0, 1.05])
plt.xlim([0.0, 1.0])
plt.title('–ö—Ä–∏–≤–∞—è Precision-Recall')
plt.show() 


# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ó–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –≤–æ–∑—å–º–µ–º –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
# 
# </div>
# 

# ## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏

# In[34]:


model_r = RandomForestClassifier(class_weight='balanced', max_depth=12, n_estimators=80,
                       random_state=12345)
model_r.fit(features_train, target_train)
predictions_valid_r = model_r.predict(features_test)
print("F1:", f1_score(target_test, predictions_valid_r))
probabilities_valid = model_r.predict_proba(features_test)
probabilities_one_valid = probabilities_valid[:, 1]
auc_roc = roc_auc_score(target_test, probabilities_one_valid)
print('AUC-ROC:', auc_roc)


# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞  #2 <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ù–µ –ø—É–≥–∞–π—Å—è —Å–µ–π—á–∞—Å –Ω–∏–∑–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —ç—Ç–æ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π. –¢–∞–∫–∂–µ –¥—É–º–∞—é —Å—Ç–æ–∏—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞ —Ç–µ—Å—Ç –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥ –ø–æ—Å–ª–µ –µ–≥–æ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (–¥–æ –Ω—É–∂–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞).
#        
# </div>

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#  
# –ü—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º—ã —É–∂–µ —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –æ–¥–Ω—É –ª—É—á—à—É—é –º–æ–¥–µ–ª—å —Å –ª—É—á—à–∏–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–±–∏—Ä–∞–µ–º. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —á–∏—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—à–∞ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –≤–∏–¥–µ–ª–∞. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, –∫–∞–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –º—ã –º–æ–∂–µ–º –æ–∂–∏–¥–∞—Ç—å –≤ –ø—Ä–æ–¥–µ, –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏. 
#     
# –í–∞–∂–Ω–æ –≤ —Ç–µ—Å—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –æ–¥–Ω—É –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ (–∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å) –∏ —Å –ª—É—á—à–∏–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Ä–∞–Ω–µ–µ.
# 
# </div>

# –ù–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ (F1 = 0.5908 –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –º–æ–¥–µ–ª–∏: RandomForestClassifier(class_weight='balanced', max_depth=12, n_estimators=80,random_state=12345)
# 
# –ê –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ–≥–æ –ª–∏—à—å F1 = 0.606.

# ## –ß–µ–∫-–ª–∏—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞

# –ü–æ—Å—Ç–∞–≤—å—Ç–µ 'x' –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ Shift+Enter.

# - [x]  Jupyter Notebook –æ—Ç–∫—Ä—ã—Ç
# - [x]  –í–µ—Å—å –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
# - [x]  –Ø—á–µ–π–∫–∏ —Å –∫–æ–¥–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 1: –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 2: –∑–∞–¥–∞—á–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞
#     - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω –±–∞–ª–∞–Ω—Å –∫–ª–∞—Å—Å–æ–≤
#     - [x]  –ò–∑—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏ –±–µ–∑ —É—á—ë—Ç–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞
#     - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 3: —É—á—Ç—ë–Ω –¥–∏—Å–±–∞–ª–∞–Ω—Å
#     - [x]  –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º
#     - [x]  –ù–∞–ø–∏—Å–∞–Ω—ã –≤—ã–≤–æ–¥—ã –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
# - [x]  –í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥ 4: –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
# - [x]  –£–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∏—á—å *F1*-–º–µ—Ä—ã –Ω–µ –º–µ–Ω–µ–µ 0.59
# - [x]  –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ *AUC-ROC*

# –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–∞–∫–∏–º–∏ –µ—â–µ —Å–ø–æ—Å–æ–±–∞–º–∏ –º–æ–∂–Ω–æ –¥–æ–±–∏—Ç—å—Å—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞. –ò –ø–æ—á–µ–º—É —É RandomForestRegressor –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –º–µ—Ç—Ä–∏–∫—É F1

# <div class="alert alert-warning">
# <h2> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"> </h2>
#     
# <b>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏üí°:</b> 
# 
# –ü–æ –≤—Ç–æ—Ä–æ–º—É –≤–æ–ø—Ä–æ—Å—É - —É –Ω–∞—Å –∑–∞–¥–∞—á–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –Ω–∞–º –Ω—É–∂–µ–Ω –Ω–µ —Ä–µ–≥—Ä–µ—Å—Å–æ—Ä, –∞ –∫–ª–∞—Å—Å–∏—Ñ–∞–π–µ—Ä RandomForestClassifier.
#        
# </div>
# 
#  

# <div class="alert alert-block alert-danger">
# <h2><s> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ä–µ–≤—å—é–µ—Ä–∞ <a class="tocSkip"></h2>
#   
# <b>–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—Éü§î:</b>
#     
# –ú–µ—Ç—Ä–∏–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ –Ω–µ –∏–∑–º–µ—Ä–∏–ª–∏, –Ω–µ–ª—å–∑—è —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.
#  
# –í —Ü–µ–ª–æ–º, –¥—É–º–∞—é, –µ—Å–ª–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏, —Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ ‚àí —É–¥–∞–ª–∏—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (—Ç—Ä–∏ —à—Ç—É–∫–∏), –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç–Ω–∫–æ–¥–∏–Ω–≥, —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –≤—ã–±–æ—Ä–∫–∏ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.
#     
# –í–∞–∂–Ω–æ –≤ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –≤—ã–≤–æ–¥—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç f1 –º–µ—Ä—ã, –≤ –ª–µ—Å–µ- –º–∏–Ω–∏–º—É–º –¥–≤–∞ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –ø–æ–¥–±–∏—Ä–∞—é—Ç—Å—è, —É–¥–æ–±–Ω–µ–µ –≤ –¥–≤–æ–π–Ω–æ–º —Ü–∏–∫–ª–µ.
#     
# 
# 
# </div>

# <div style="border:solid Chocolate 2px; padding: 40px">
# 
# **–û–±—â–∏–π –≤—ã–≤–æ–¥ –ø–æ –ø—Ä–æ–µ–∫—Ç—É**
#     
# –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç! –ú–Ω–µ –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ö–æ–¥–æ–º –º—ã—Å–ª–µ–π –∏ —Ç–≤–æ–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏. –í–∏–¥–Ω—ã –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –ø—Ä–æ–µ–∫—Ç—É. –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–ª—É—á—à–∏—Ç—å. –ò—Ö —Ç—ã –Ω–∞–π–¥–µ—à—å –≤ —Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö.
#     
# **–û—Ç–º–µ—á—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞üöÄ**
#     
# * –í—Å–µ —à–∞–≥–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ–π–¥–µ–Ω—ã.
# * –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∏ –º–æ–¥–µ–ª–∏, —Ç—Ä–∏ —Å–ø–æ—Å–æ–±–∞ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º.
# * –ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫ –∫–æ–¥—É (–Ω–µ –≤–µ–∑–¥–µ, –ø—Ä–∞–≤–¥–∞, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —ç—Ç–æ —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç).
#     
# **–ù–∞ —á—Ç–æ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µü§î**
#     
# * –ù—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–æ —ç–Ω–∫–æ–¥–∏–Ω–≥–∞.
# * –í–µ–∑–¥–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è.
# * –ú–æ–¥–µ–ª–∏ —Å–º–æ—Ç—Ä–∏–º —Å–Ω–∞—á–∞–ª–∞ –±–µ–∑ –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞, –ø–æ–¥–±–∏—Ä–∞—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ—Ç–æ–º —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ—Ö–Ω–∏–∫–∞–º–∏ –±–æ—Ä—å–±—ã —Å –¥–∏—Å–±–∞–ª–∞–Ω—Å–æ–º.
# * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–¥–µ–ª–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É.
# * –í —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–µ–ª—å–∑—è –ø–æ–¥–±–∏—Ä–∞—Ç—å –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
# * –≠—Ç–∏ –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è —è —Ç–∞–∫–∂–µ –Ω–∞–ø–∏—Å–∞–ª –ø–æ —Ö–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞.
#     
# **–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –∏ –∂–¥—É —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–≤—å—é!**üòâ
#     
#     
# </div>

# <div style="border:solid Chocolate 2px; padding: 40px">
# 
# **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–æ –≤—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ**
#     
# –•–æ—Ä–æ—à–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞, –ø–æ—á—Ç–∏ –≤—Å–µ —Å–¥–µ–ª–∞–Ω–æ, –¥–≤–∞ —à—Ç—Ä–∏—Ö–∞ –∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç.
#     
# 1) –ó–∞–±—ã–ª–∏ —Å–¥–µ–ª–∞—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏. –≠—Ç–æ —á–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞, –∫–æ–≥–¥–∞ —Ç–µ—Å—Ç –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∂–µ.
#     
# 2) –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–∞, –≤ –Ω–µ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –∞–ø—Å–µ–º–ø–ª–∏–Ω–≥–∞ 10, –Ω–∞–º –Ω—É–∂–µ–Ω 4, –µ—Å–ª–∏ —É –Ω–∞—Å —Ä–µ–¥–∫–∏–π –∫–ª–∞—Å—Å –≤ —á–µ—Ç—ã—Ä–µ —Ä–∞–∑–∞ —Ä–µ–∂–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è. –ú—ã –¥–æ–≤–æ–¥–∏–º –±–∞–ª–∞–Ω—Å –¥–æ 1:1. 
#     
# –ü–æ –æ—Å—Ç–∞–ª—å–Ω–æ–º—É, –∫–∞–∂–µ—Ç—Å—è, –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ù–∞–¥–µ—é—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å—Ç–∏–ª.
# 
# 
# **–ñ–µ–ª–∞—é —É–¥–∞—á–∏ –∏ –∂–¥—É —Ç–≤–æ–π –ø—Ä–æ–µ–∫—Ç –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–µ–≤—å—é!**üòâ
# </div>

# <div style="border:solid Chocolate 2px; padding: 40px">
# 
# **–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ**
# 
# –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç. 
# 
# –ñ–µ–ª–∞—é —É–¥–∞—á–∏ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–π —É—á–µ–±–µ!
# 
# </div>
# 

# In[ ]:




